name: Release & Publish Docker Image

on:
  push:
    branches:
      - main
      - dev
  release:
    types: [created, published, prereleased, released]

jobs:
  bump_version:
    if: github.event_name == 'push' && github.ref_name == 'dev'
    name: Create release PR if changesets exist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - run: npm ci
      - name: Check for changesets
        id: changeset_check
        run: |
          if find .changeset -maxdepth 1 -name '*.md' ! -name 'README.md' | grep -q .; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release PR
        if: steps.changeset_check.outputs.has_changesets == 'true'
        uses: changesets/action@v1
        with:
          version: npx changeset version
          commit: "ci: apply version bump"
          publish: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_release:
    if: github.event_name == 'push'
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci

      - name: Check for changesets
        id: changeset_check
        run: |
          if find .changeset -maxdepth 1 -name '*.md' ! -name 'README.md' | grep -q .; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi

      - id: get_version
        run: |
          base_version=$(node -p "require('./package.json').version")
          if [ "${GITHUB_REF_NAME}" = "dev" ]; then
            echo "version=v${base_version}-alpha.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          else
            echo "version=v${base_version}" >> $GITHUB_ENV
          fi

      - name: Check if tag exists
        id: check_tag
        run: |
          if gh release view "${{ env.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        if: steps.check_tag.outputs.exists == 'false' && steps.changeset_check.outputs.has_changesets == 'false'
        run: |
          gh release create "${{ env.version }}" \
            --title "Release ${{ env.version }}" \
            --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  push_in_dev:
    if: github.event_name == 'push' && github.ref_name == 'dev'
    name: "Push in dev"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for changesets
        id: changeset_check
        run: |
          if find .changeset -maxdepth 1 -name '*.md' ! -name 'README.md' | grep -q .; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if PR exists
        if: steps.changeset_check.outputs.has_changesets == 'true'
        id: check_pr
        run: |
          pr_exists=$(gh pr list --head dev --json number -q '.[0].number')
          if [ -z "$pr_exists" ]; then
            echo "no PR found"
            echo "create_pr=true" >> $GITHUB_OUTPUT
          else
            echo "PR already exists: $pr_exists"
            echo "create_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Pull Request
        if: steps.check_pr.outputs.create_pr == 'true' && steps.changeset_check.outputs.has_changesets == 'true'
        run: gh pr create --title "Merge new changes" --body "This PR was created automatically by GitHub Actions" --head dev --base main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: get_version
        if: steps.changeset_check.outputs.has_changesets == 'true'
        run: |
          base_version=$(node -p "require('./package.json').version")
          if [ "${GITHUB_REF_NAME}" = "dev" ]; then
            echo "version=v${base_version}-alpha.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          else
            echo "version=v${base_version}" >> $GITHUB_ENV
          fi

      - name: Check if tag exists
        if: steps.changeset_check.outputs.has_changesets == 'true'
        id: check_tag
        run: |
          if gh release view "${{ env.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub pre-release
        if: steps.check_tag.outputs.exists == 'false' && steps.changeset_check.outputs.has_changesets == 'true'
        run: |
          CURRENT="${{ env.version }}"

          LAST_MAIN=$(gh release list --exclude-drafts --limit 1 --json tagName,isPrerelease \
            --jq '.[] | select(.isPrerelease==false) | .tagName' | sed 's/^v//')

          echo "Current version: $CURRENT"
          echo "Last main version: $LAST_MAIN"

          BASE_VERSION=$(echo "$CURRENT" | sed -E 's/-alpha.*//')

          if [ "$BASE_VERSION" = "$LAST_MAIN" ]; then
            echo "❌ Error: cannot create pre-release $CURRENT due to existing release $LAST_MAIN in main branch"
            exit 1
          fi

          gh release create "$CURRENT" \
            --title "Release $CURRENT" \
            --prerelease \
            --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker_publish:
    if: github.event_name == 'release' && github.event.release.draft == false
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract version from GitHub release tag
        run: if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV fi
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/storage-service:latest
            ${{ secrets.DOCKER_USERNAME }}/storage-service:${{ env.VERSION }}
